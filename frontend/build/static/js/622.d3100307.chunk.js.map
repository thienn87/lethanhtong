{"version":3,"file":"static/js/622.d3100307.chunk.js","mappings":"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","sources":["components/apps/hooks/useTuitionFeeData.js","components/apps/hooks/usePaymentDistribution.js","components/apps/hooks/useReceiptData.js"],"sourcesContent":["import { useState, useCallback, useEffect, useRef } from 'react';\nimport { Config } from '../../config';\n\nexport const useTuitionFeeData = (mshs, isOpen) => {\n  const domain = Config();\n  const [loading, setLoading] = useState(false);\n  const [feeTable, setFeeTable] = useState({});\n  const [processedFees, setProcessedFees] = useState([]);\n  const [currentMonth, setCurrentMonth] = useState(\"\");\n  const [transactionId, setTransactionId] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [dataFetched, setDataFetched] = useState(false);\n  const [pendingInvoice, setPendingInvoice] = useState(null);\n  const fetchRef = useRef(false);\n\n  const fetchTuitionFeeData = useCallback(async (action = \"modal\") => {\n    if (!mshs || !isOpen || fetchRef.current) return null;\n    try {\n      fetchRef.current = true;\n      setLoading(true);\n      setError(null);\n      \n      const currentMonth = new Date().getMonth() + 1;\n      const currentYear = new Date().getFullYear();\n      const url = `${domain}/api/tuition-fee-listings/by-mshs?mshs=${encodeURIComponent(mshs)}&month=${currentMonth}&year=${currentYear}&action=${encodeURIComponent(action)}`;\n      \n      console.log(\"Fetching tuition fee data:\", url); // Debug log\n      const response = await fetch(url, {\n        method: \"GET\",\n        headers: { \"Content-Type\": \"application/json\" },\n      });\n      \n      if (!response.ok) throw new Error(`Failed to fetch tuition fee data: ${response.statusText}`);\n      \n      const result = await response.json();\n      if (result.status === 'success' && result.data) {\n        const feeData = result.data;\n        setFeeTable(feeData);\n        if (feeData.invoice_id) {\n          setTransactionId(feeData.invoice_id);\n          setPendingInvoice({\n            id: feeData.invoice_id,\n            mshs: mshs,\n            month: currentMonth,\n            year: currentYear\n          });\n        }\n        setCurrentMonth(currentMonth.toString());\n        setProcessedFees(feeData.processedFees || []);\n        setDataFetched(true);\n        return feeData;\n      }\n      return null;\n    } catch (error) {\n      console.error(\"Error fetching tuition fee data:\", error);\n      setError(error.message);\n      return null;\n    } finally {\n      setLoading(false);\n      fetchRef.current = false;\n    }\n  }, [domain, mshs, isOpen]);\n\n  const deletePendingInvoice = useCallback(async () => {\n    if (pendingInvoice && pendingInvoice.id) {\n      try {\n        const formattedMonth = parseInt(pendingInvoice.month, 10);\n        const response = await fetch(`${domain}/api/invoice/delete`, {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({\n            invoice_id: pendingInvoice.id,\n            year: pendingInvoice.year,\n            month: formattedMonth\n          }),\n        });\n        if (!response.ok) {\n          console.error(\"Failed to delete pending invoice\");\n        } else {\n          console.log(\"Successfully deleted pending invoice:\", pendingInvoice.id);\n          setPendingInvoice(null);\n        }\n      } catch (error) {\n        console.error(\"Error deleting pending invoice:\", error);\n      }\n    }\n  }, [domain, pendingInvoice]);\n\n  useEffect(() => {\n    if (mshs && isOpen && !dataFetched) {\n      fetchTuitionFeeData();\n    }\n  }, [mshs, isOpen, dataFetched, fetchTuitionFeeData]);\n\n  useEffect(() => {\n    return () => {\n      deletePendingInvoice();\n    };\n  }, [deletePendingInvoice]);\n\n  return {\n    loading,\n    feeTable,\n    processedFees,\n    currentMonth,\n    transactionId,\n    error,\n    fetchTuitionFeeData,\n    pendingInvoice,\n    deletePendingInvoice,\n    totalFeeAmount: processedFees.reduce((sum, fee) => sum + (fee.suggested_payment || 0), 0)\n  };\n};","\"use strict\";\n\nimport { useState, useCallback, useEffect } from 'react';\n\n/**\n * Custom hook to handle payment distribution across fee items\n * @param {Array} feeItems - Array of fee items\n * @param {Function} setFeeItems - Function to update fee items (optional)\n * @returns {Object} Payment distribution state and functions\n */\nexport const usePaymentDistribution = (feeItems, setFeeItems) => {\n  const [totalPaymentAmount, setTotalPaymentAmount] = useState(0);\n  const [totalFeeAmount, setTotalFeeAmount] = useState(0);\n  const [internalFeeItems, setInternalFeeItems] = useState([]);\n\n  // Initialize internal fee items when external items change\n  useEffect(() => {\n    if (feeItems && Array.isArray(feeItems)) {\n      setInternalFeeItems(feeItems);\n    }\n  }, [feeItems]);\n\n  // Function to distribute payment across fee rows\n  const distributePayment = useCallback((totalAmount) => {\n    if (!totalAmount || totalAmount <= 0 || !feeItems || !feeItems.length) {\n      return feeItems; // Return original items if no valid amount\n    }\n\n    // Get only checked items\n    const checkedItems = feeItems.filter(item => item.isChecked);\n    if (!checkedItems.length) {\n      return feeItems; // Return original items if no checked items\n    }\n\n    // Create a copy of the fee items to work with\n    const updatedItems = [...feeItems];\n    \n    // Initialize all checked items with zero payment\n    for (let i = 0; i < updatedItems.length; i++) {\n      if (updatedItems[i].isChecked) {\n        updatedItems[i] = {\n          ...updatedItems[i],\n          amount_paid: 0,\n          isAmountModified: true\n        };\n      }\n    }\n\n    // Group items by type with priority: HP -> BT -> NT -> others\n    const hpItems = checkedItems.filter(item => item.code && item.code.includes('HP'));\n    const btItems = checkedItems.filter(item => item.code && item.code.includes('BT'));\n    const ntItems = checkedItems.filter(item => item.code && item.code.includes('NT'));\n    const otherItems = checkedItems.filter(item => \n      (!item.code || \n       (!item.code.includes('HP') && !item.code.includes('BT') && !item.code.includes('NT')))\n    );\n\n    // Sort items by code for consistent distribution\n    const sortedHpItems = [...hpItems].sort((a, b) => a.code.localeCompare(b.code));\n    const sortedBtItems = [...btItems].sort((a, b) => a.code.localeCompare(b.code));\n    const sortedNtItems = [...ntItems].sort((a, b) => a.code.localeCompare(b.code));\n    const sortedOtherItems = [...otherItems].sort((a, b) => \n      (a.code || '').localeCompare(b.code || '')\n    );\n\n    // Combine all items in priority order\n    const prioritizedItems = [\n      ...sortedHpItems,\n      ...sortedBtItems,\n      ...sortedNtItems,\n      ...sortedOtherItems\n    ];\n\n    // Calculate total suggested payment for each category\n    const categoryTotals = {\n      hp: sortedHpItems.reduce((sum, item) => sum + parseFloat(item.suggested_payment || 0), 0),\n      bt: sortedBtItems.reduce((sum, item) => sum + parseFloat(item.suggested_payment || 0), 0),\n      nt: sortedNtItems.reduce((sum, item) => sum + parseFloat(item.suggested_payment || 0), 0),\n      other: sortedOtherItems.reduce((sum, item) => sum + parseFloat(item.suggested_payment || 0), 0)\n    };\n\n    // Total of all suggested payments\n    const totalCategoryPayments = categoryTotals.hp + categoryTotals.bt + \n                                 categoryTotals.nt + categoryTotals.other;\n\n    // If total amount is exactly equal to total suggested, use suggested amounts\n    if (Math.abs(totalAmount - totalCategoryPayments) < 0.01) {\n      for (const item of prioritizedItems) {\n        const itemIndex = feeItems.findIndex(fee => fee.code === item.code);\n        if (itemIndex === -1) continue;\n        \n        updatedItems[itemIndex] = {\n          ...updatedItems[itemIndex],\n          amount_paid: parseFloat(item.suggested_payment || 0),\n          isAmountModified: true\n        };\n      }\n    } \n    // If we have a different amount to distribute\n    else {\n      let remainingAmount = totalAmount;\n      \n      // Calculate how many complete cycles we can do\n      const completeCycles = Math.floor(remainingAmount / totalCategoryPayments);\n      \n      // If we can do at least one complete cycle\n      if (completeCycles > 0 && totalCategoryPayments > 0) {\n        // Distribute complete cycles\n        for (const item of prioritizedItems) {\n          const itemIndex = feeItems.findIndex(fee => fee.code === item.code);\n          if (itemIndex === -1) continue;\n          \n          const suggestedPayment = parseFloat(item.suggested_payment || 0);\n          updatedItems[itemIndex] = {\n            ...updatedItems[itemIndex],\n            amount_paid: suggestedPayment * completeCycles,\n            isAmountModified: true\n          };\n        }\n        \n        // Update remaining amount\n        remainingAmount -= totalCategoryPayments * completeCycles;\n      }\n      \n      // Now distribute the remaining amount according to priority\n      if (remainingAmount > 0) {\n        // First try to distribute to HP items\n        if (categoryTotals.hp > 0) {\n          for (const item of sortedHpItems) {\n            const itemIndex = feeItems.findIndex(fee => fee.code === item.code);\n            if (itemIndex === -1) continue;\n            \n            const suggestedPayment = parseFloat(item.suggested_payment || 0);\n            const currentPaid = parseFloat(updatedItems[itemIndex].amount_paid || 0);\n            \n            if (remainingAmount >= suggestedPayment) {\n              // Full payment for this item\n              updatedItems[itemIndex] = {\n                ...updatedItems[itemIndex],\n                amount_paid: currentPaid + suggestedPayment,\n                isAmountModified: true\n              };\n              remainingAmount -= suggestedPayment;\n            } else {\n              // Partial payment\n              updatedItems[itemIndex] = {\n                ...updatedItems[itemIndex],\n                amount_paid: currentPaid + remainingAmount,\n                isAmountModified: true\n              };\n              remainingAmount = 0;\n              break;\n            }\n            \n            if (remainingAmount <= 0) break;\n          }\n        }\n        \n        // If there's still remaining amount, try BT items\n        if (remainingAmount > 0 && categoryTotals.bt > 0) {\n          for (const item of sortedBtItems) {\n            const itemIndex = feeItems.findIndex(fee => fee.code === item.code);\n            if (itemIndex === -1) continue;\n            \n            const suggestedPayment = parseFloat(item.suggested_payment || 0);\n            const currentPaid = parseFloat(updatedItems[itemIndex].amount_paid || 0);\n            \n            if (remainingAmount >= suggestedPayment) {\n              // Full payment for this item\n              updatedItems[itemIndex] = {\n                ...updatedItems[itemIndex],\n                amount_paid: currentPaid + suggestedPayment,\n                isAmountModified: true\n              };\n              remainingAmount -= suggestedPayment;\n            } else {\n              // Partial payment\n              updatedItems[itemIndex] = {\n                ...updatedItems[itemIndex],\n                amount_paid: currentPaid + remainingAmount,\n                isAmountModified: true\n              };\n              remainingAmount = 0;\n              break;\n            }\n            \n            if (remainingAmount <= 0) break;\n          }\n        }\n        \n        // If there's still remaining amount, try NT items\n        if (remainingAmount > 0 && categoryTotals.nt > 0) {\n          for (const item of sortedNtItems) {\n            const itemIndex = feeItems.findIndex(fee => fee.code === item.code);\n            if (itemIndex === -1) continue;\n            \n            const suggestedPayment = parseFloat(item.suggested_payment || 0);\n            const currentPaid = parseFloat(updatedItems[itemIndex].amount_paid || 0);\n            \n            if (remainingAmount >= suggestedPayment) {\n              // Full payment for this item\n              updatedItems[itemIndex] = {\n                ...updatedItems[itemIndex],\n                amount_paid: currentPaid + suggestedPayment,\n                isAmountModified: true\n              };\n              remainingAmount -= suggestedPayment;\n            } else {\n              // Partial payment\n              updatedItems[itemIndex] = {\n                ...updatedItems[itemIndex],\n                amount_paid: currentPaid + remainingAmount,\n                isAmountModified: true\n              };\n              remainingAmount = 0;\n              break;\n            }\n            \n            if (remainingAmount <= 0) break;\n          }\n        }\n        \n        // If there's still remaining amount, try other items\n        if (remainingAmount > 0 && categoryTotals.other > 0) {\n          for (const item of sortedOtherItems) {\n            const itemIndex = feeItems.findIndex(fee => fee.code === item.code);\n            if (itemIndex === -1) continue;\n            \n            const suggestedPayment = parseFloat(item.suggested_payment || 0);\n            const currentPaid = parseFloat(updatedItems[itemIndex].amount_paid || 0);\n            \n            if (remainingAmount >= suggestedPayment) {\n              // Full payment for this item\n              updatedItems[itemIndex] = {\n                ...updatedItems[itemIndex],\n                amount_paid: currentPaid + suggestedPayment,\n                isAmountModified: true\n              };\n              remainingAmount -= suggestedPayment;\n            } else {\n              // Partial payment\n              updatedItems[itemIndex] = {\n                ...updatedItems[itemIndex],\n                amount_paid: currentPaid + remainingAmount,\n                isAmountModified: true\n              };\n              remainingAmount = 0;\n              break;\n            }\n            \n            if (remainingAmount <= 0) break;\n          }\n        }\n        \n        // If there's still remaining amount after going through all items once,\n        // start another cycle with HP items\n        if (remainingAmount > 0) {\n          // Start another cycle with HP items\n          let cycleItems = [...prioritizedItems];\n          \n          while (remainingAmount > 0 && cycleItems.length > 0) {\n            const item = cycleItems.shift(); // Get the next item in priority order\n            const itemIndex = feeItems.findIndex(fee => fee.code === item.code);\n            if (itemIndex === -1) continue;\n            \n            const suggestedPayment = parseFloat(item.suggested_payment || 0);\n            const currentPaid = parseFloat(updatedItems[itemIndex].amount_paid || 0);\n            \n            if (remainingAmount >= suggestedPayment) {\n              // Full payment for this item\n              updatedItems[itemIndex] = {\n                ...updatedItems[itemIndex],\n                amount_paid: currentPaid + suggestedPayment,\n                isAmountModified: true\n              };\n              remainingAmount -= suggestedPayment;\n            } else {\n              // Partial payment\n              updatedItems[itemIndex] = {\n                ...updatedItems[itemIndex],\n                amount_paid: currentPaid + remainingAmount,\n                isAmountModified: true\n              };\n              remainingAmount = 0;\n              break;\n            }\n          }\n        }\n      }\n    }\n    \n    // Round all amount_paid values to 2 decimal places for consistency\n    for (let i = 0; i < updatedItems.length; i++) {\n      if (updatedItems[i].amount_paid !== undefined) {\n        updatedItems[i].amount_paid = Math.round(updatedItems[i].amount_paid * 100) / 100;\n      }\n    }\n    \n    // Update internal state\n    setInternalFeeItems(updatedItems);\n    \n    // Try to update external state if setFeeItems is a function\n    if (typeof setFeeItems === 'function') {\n      try {\n        setFeeItems(updatedItems);\n      } catch (error) {\n        console.error('Error updating fee items:', error);\n      }\n    }\n    \n    // Always return the updated items\n    return updatedItems;\n  }, [feeItems]);\n\n  // Calculate total fee amount when fee items change\n  useEffect(() => {\n    if (!internalFeeItems || !internalFeeItems.length) return;\n    \n    const total = internalFeeItems\n      .filter(fee => fee.isChecked)\n      .reduce((sum, fee) => {\n        return sum + parseFloat(fee.amount_paid || fee.suggested_payment || 0);\n      }, 0);\n    \n    setTotalFeeAmount(total);\n  }, [internalFeeItems]);\n\n  // Handle total payment amount change\n  const handleTotalPaymentChange = useCallback((e) => {\n    const value = parseFloat(e.target.value) || 0;\n    setTotalPaymentAmount(value);\n    \n    // Auto-distribute the amount and return the updated items\n    return distributePayment(value);\n  }, [distributePayment]);\n\n  return {\n    totalPaymentAmount,\n    setTotalPaymentAmount,\n    totalFeeAmount,\n    distributePayment,\n    handleTotalPaymentChange,\n    feeItems: internalFeeItems\n  };\n};","import { useState, useCallback, useRef } from \"react\";\nimport { jsPDF } from \"jspdf\";\nimport html2canvas from \"html2canvas\";\n\n/**\n * Custom hook to handle receipt data, PDF generation, and API submission\n * \n * @param {Object} studentData - Student data\n * @param {string} transactionId - Transaction ID\n * @param {string} currentMonth - Current month\n * @param {string} noiDungHoa - Receipt description\n * @param {number} totalFeeAmount - Total fee amount\n * @param {Array} processedFees - Processed fees data\n * @param {Function} prepareTransactionData - Function to prepare transaction data\n * @param {string} domain - API domain\n * @param {string} pendingInvoiceId - Pending invoice ID if any\n * @param {Function} onSuccess - Callback function on successful submission\n * @returns {Object} Receipt data and functions\n */\nexport const useReceiptData = ({\n  studentData,\n  transactionId,\n  currentMonth,\n  noiDungHoa,\n  totalFeeAmount,\n  processedFees,\n  prepareTransactionData,\n  domain,\n  pendingInvoiceId,\n  onSuccess\n}) => {\n  const [receiptData, setReceiptData] = useState(null);\n  const [pdfLoading, setPdfLoading] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState(\"\");\n  const receiptRef = useRef(null);\n\n  /**\n   * Generate receipt preview and submit to API simultaneously\n   * @returns {Promise<Object>} Receipt data\n   */\n  const generateReceiptAndSubmit = useCallback(async () => {\n    try {\n      if (!studentData) {\n        throw new Error(\"No student data available\");\n      }\n      \n      // Filter checked fees\n      const checkedFees = processedFees.filter(fee => fee.isChecked);\n      if (!checkedFees.length) {\n        throw new Error(\"No fees selected\");\n      }\n      \n      // Calculate total amount\n      const totalPaidAmount = checkedFees.reduce(\n        (sum, fee) => sum + parseFloat(fee.amount_paid || 0), \n        0\n      );\n      \n      // Generate receipt description\n      const selectedMaHP = checkedFees.map(fee => fee.code);\n      const noiDung = noiDungHoa || `Thu ${selectedMaHP.join(\", \")} tháng ${currentMonth}`;\n      \n      // Create preview receipt data\n      const previewData = {\n        soChungTu: transactionId,\n        tenHocSinh: studentData.name,\n        mshs: studentData.mshs || \"\",\n        lop: studentData ? `${studentData.grade}${studentData.class}` : \"\",\n        dienGiai: noiDung,\n        note: noiDung,\n        soTien: totalPaidAmount,\n        ngayThu: new Date().toISOString(),\n        student: studentData,\n        invoice_id: transactionId,\n        student_name: studentData.name,\n        class: studentData ? `${studentData.grade}${studentData.class}` : \"\",\n        amount_paid: totalPaidAmount,\n        invoice_details: noiDung,\n        created_at: new Date().toISOString(),\n        transactions: checkedFees.map(fee => ({\n          id: `preview-${fee.code}`,\n          paid_code: fee.code,\n          amount_paid: parseFloat(fee.amount_paid || 0),\n          tuition_name: fee.name || fee.code,\n          created_at: new Date().toISOString()\n        })),\n        isSubmitting: true // Flag to indicate submission in progress\n      };\n      \n      // Update receipt data state\n      setReceiptData(previewData);\n      \n      // Start API submission\n      setIsSubmitting(true);\n      \n      // Prepare transaction data for API\n      const transactionData = prepareTransactionData();\n      \n      // Prepare payload\n      const payload = {\n        invoice_id: transactionId,\n        invoice_details: noiDung,\n        mshs: studentData.mshs,\n        transaction_data: transactionData,\n        month: currentMonth,\n        status: 'completed',\n        pending_invoice_id: pendingInvoiceId\n      };\n      \n      // Submit to API\n      const response = await fetch(`${domain}/api/payment/process`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`Failed to process payment: ${response.statusText}`);\n      }\n      \n      const result = await response.json();\n      if (result.status !== 'success') {\n        throw new Error(result.message || 'Unknown error occurred');\n      }\n      \n      // Update receipt with actual data from server\n      const updatedReceiptData = {\n        ...previewData,\n        soChungTu: result.data.invoice_id,\n        invoice_id: result.data.invoice_id,\n        ngayThu: result.data.created_at,\n        created_at: result.data.created_at,\n        isSubmitting: false\n      };\n      \n      setReceiptData(updatedReceiptData);\n      \n      // Call success callback\n      if (onSuccess) {\n        onSuccess(result.data);\n      }\n      \n      setToastMessage(\"Giao dịch đã được xử lý thành công\");\n      setShowToast(true);\n      setTimeout(() => setShowToast(false), 3000);\n      \n      return updatedReceiptData;\n      \n    } catch (error) {\n      console.error(\"Error processing payment:\", error);\n      \n      // Update receipt to show error state\n      if (receiptData) {\n        setReceiptData({\n          ...receiptData,\n          isSubmitting: false,\n          hasError: true,\n          errorMessage: error.message\n        });\n      }\n      \n      setToastMessage(`Lỗi khi xử lý giao dịch: ${error.message}`);\n      setShowToast(true);\n      setTimeout(() => setShowToast(false), 3000);\n      return null;\n    } finally {\n      setIsSubmitting(false);\n    }\n  }, [\n    studentData, \n    processedFees, \n    noiDungHoa, \n    currentMonth, \n    transactionId, \n    prepareTransactionData, \n    domain, \n    pendingInvoiceId, \n    onSuccess\n  ]);\n\n  /**\n   * Generate and handle PDF actions\n   * @param {boolean} openInNewTab - Whether to open in new tab (kept for backward compatibility)\n   * @param {boolean} autoPrint - Whether to automatically print the PDF\n   */\n  const handlePdfAction = useCallback(async (openInNewTab = true, autoPrint = true) => {\n    setPdfLoading(true);\n    try {\n      // Use the current receipt element in the DOM\n      if (receiptRef.current) {\n        // Generate PDF using html2canvas and jsPDF\n        const element = receiptRef.current;\n        const canvas = await html2canvas(element, { \n          scale: 2,\n          logging: false,\n          useCORS: true,\n          allowTaint: true\n        });\n        \n        const imgData = canvas.toDataURL(\"image/png\");\n        \n        // Create PDF in landscape A5 format\n        // A5 dimensions: 210 x 148 mm (landscape: 148 x 210 mm)\n        const pdf = new jsPDF({\n          orientation: \"landscape\", // Set to landscape\n          unit: \"mm\",\n          format: \"a5\" // Set to A5 format\n        });\n        \n        // Calculate dimensions to maintain aspect ratio\n        const pdfWidth = pdf.internal.pageSize.getWidth(); // 210mm for A5 landscape\n        const pdfHeight = pdf.internal.pageSize.getHeight(); // 148mm for A5 landscape\n        \n        // Calculate scaling to fit the content properly\n        const imgWidth = canvas.width;\n        const imgHeight = canvas.height;\n        const ratio = Math.min(pdfWidth / imgWidth, pdfHeight / imgHeight);\n        \n        // Calculate centered position\n        const xOffset = (pdfWidth - imgWidth * ratio) / 2;\n        const yOffset = (pdfHeight - imgHeight * ratio) / 2;\n        \n        // Add image to PDF with proper scaling and centering\n        pdf.addImage(\n          imgData, \n          \"PNG\", \n          xOffset, \n          yOffset, \n          imgWidth * ratio, \n          imgHeight * ratio\n        );\n        \n        // Add processing watermark if applicable\n        if (receiptData?.isSubmitting) {\n          pdf.setTextColor(200, 0, 0);\n          pdf.setFont(\"helvetica\", \"bold\");\n          pdf.setFontSize(30);\n          pdf.text(\"ĐANG XỬ LÝ\", pdf.internal.pageSize.getWidth() / 2, pdf.internal.pageSize.getHeight() / 2, {\n            align: \"center\",\n            angle: 45\n          });\n        }\n        \n        // Always open in new tab and auto-print\n        const pdfBlob = pdf.output('blob');\n        const blobUrl = URL.createObjectURL(pdfBlob);\n        \n        // Open in new window with specific features to encourage window instead of tab\n        const windowFeatures = \"width=800,height=600,menubar=yes,location=yes,resizable=yes,scrollbars=yes,status=yes\";\n        const printWindow = window.open(blobUrl, '_blank', windowFeatures);\n        \n        if (!printWindow) {\n          throw new Error(\"Không thể mở cửa sổ in. Vui lòng kiểm tra cài đặt trình duyệt của bạn.\");\n        }\n        \n        // Clean up the blob URL when the window is closed\n        printWindow.onunload = function() {\n          URL.revokeObjectURL(blobUrl);\n        };\n        \n        // Add script to print and close window after loading\n        printWindow.addEventListener('load', function() {\n          // Add a slight delay to ensure PDF is fully loaded\n          setTimeout(function() {\n            printWindow.print();\n            \n            // Set up event listener for after print\n            printWindow.addEventListener('afterprint', function() {\n              // Auto close after printing with a small delay\n              setTimeout(function() {\n                printWindow.close();\n              }, 500);\n            });\n          }, 1000);\n        });\n        \n        setToastMessage(\"Đã gửi biên lai đến máy in\");\n        setShowToast(true);\n        setTimeout(() => setShowToast(false), 3000);\n      } else {\n        throw new Error(\"Receipt element not found\");\n      }\n    } catch (error) {\n      console.error(\"Error generating PDF:\", error);\n      setToastMessage(\"Lỗi khi tạo PDF: \" + error.message);\n      setShowToast(true);\n      setTimeout(() => setShowToast(false), 3000);\n    } finally {\n      setPdfLoading(false);\n    }\n  }, [studentData, transactionId, receiptData]);\n\n  return {\n    receiptData,\n    setReceiptData,\n    receiptRef,\n    pdfLoading,\n    isSubmitting,\n    showToast,\n    setShowToast,\n    toastMessage,\n    setToastMessage,\n    handlePdfAction,\n    generateReceiptAndSubmit\n  };\n};"],"names":["useTuitionFeeData","mshs","isOpen","domain","Config","loading","setLoading","useState","feeTable","setFeeTable","processedFees","setProcessedFees","currentMonth","setCurrentMonth","transactionId","setTransactionId","error","setError","dataFetched","setDataFetched","pendingInvoice","setPendingInvoice","fetchRef","useRef","fetchTuitionFeeData","useCallback","async","action","arguments","length","undefined","current","Date","getMonth","currentYear","getFullYear","url","encodeURIComponent","console","log","response","fetch","method","headers","ok","Error","statusText","result","json","status","data","feeData","invoice_id","id","month","year","toString","message","deletePendingInvoice","formattedMonth","parseInt","body","JSON","stringify","useEffect","totalFeeAmount","reduce","sum","fee","suggested_payment","usePaymentDistribution","feeItems","setFeeItems","totalPaymentAmount","setTotalPaymentAmount","setTotalFeeAmount","internalFeeItems","setInternalFeeItems","Array","isArray","distributePayment","totalAmount","checkedItems","filter","item","isChecked","updatedItems","i","amount_paid","isAmountModified","hpItems","code","includes","btItems","ntItems","otherItems","sortedHpItems","sort","a","b","localeCompare","sortedBtItems","sortedNtItems","sortedOtherItems","prioritizedItems","categoryTotals","parseFloat","totalCategoryPayments","Math","abs","itemIndex","findIndex","remainingAmount","completeCycles","floor","suggestedPayment","currentPaid","cycleItems","shift","round","total","handleTotalPaymentChange","e","value","target","useReceiptData","_ref","studentData","noiDungHoa","prepareTransactionData","pendingInvoiceId","onSuccess","receiptData","setReceiptData","pdfLoading","setPdfLoading","isSubmitting","setIsSubmitting","showToast","setShowToast","toastMessage","setToastMessage","receiptRef","generateReceiptAndSubmit","checkedFees","totalPaidAmount","selectedMaHP","map","noiDung","join","previewData","soChungTu","tenHocSinh","name","lop","grade","class","dienGiai","note","soTien","ngayThu","toISOString","student","student_name","invoice_details","created_at","transactions","paid_code","tuition_name","transactionData","payload","transaction_data","pending_invoice_id","updatedReceiptData","setTimeout","hasError","errorMessage","handlePdfAction","element","canvas","html2canvas","scale","logging","useCORS","allowTaint","imgData","toDataURL","pdf","jsPDF","orientation","unit","format","pdfWidth","internal","pageSize","getWidth","pdfHeight","getHeight","imgWidth","width","imgHeight","height","ratio","min","xOffset","yOffset","addImage","setTextColor","setFont","setFontSize","text","align","angle","pdfBlob","output","blobUrl","URL","createObjectURL","windowFeatures","printWindow","window","open","onunload","revokeObjectURL","addEventListener","print","close"],"sourceRoot":""}